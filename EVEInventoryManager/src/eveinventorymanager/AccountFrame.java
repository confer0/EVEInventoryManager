/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eveinventorymanager;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 334226180
 */
public class AccountFrame extends javax.swing.JFrame {
    
    ItemList accountList;
    ArrayList alertList;
    boolean listsModified;
    
    /**
     * Creates new form AccountFrame
     */
    public AccountFrame() {
        initComponents();
        accountList = new ItemList();
        alertList = new ArrayList();
        listsModified = false;
        this.setIconImage(new ImageIcon("icon.png").getImage());
        setCloseOperation();
        toggleAlertCheckBoxMenuItem.setEnabled(true);
    }
    
    //If you try to close without saving, it gives you the option.
    public void setCloseOperation() {
        WindowListener exitListener = new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                if(listsModified) {
                    //ASK TO CONFIRM EXIT WITHOUT SAVE
                    //Yes=0,No=1,Cancel=2 or -1.
                    int choice = JOptionPane.showConfirmDialog(null,"Changes have not been saved,\nwould you like to save your changes?");
                    switch(choice) {
                        case 0: Functions.save(accountList, alertList);System.exit(0);break;
                        case 1: System.exit(0);break;
                        case 2: break;
                        case -1: break;
                        default: System.out.println("What the heck did you do?!?");
                    }
                } else {
                    System.exit(0);
                }
            }
        };
        this.addWindowListener(exitListener);
    }
    
    /**
     * This function forces the table to refresh itself.
     * Make changes to data before calling.
     */
    public void refreshTable() {
        DefaultTableModel model=(DefaultTableModel)accountTable.getModel();
        model.setDataVector(accountList.toTable(searchTextField.getText()),new Object[]{"Name","Quantity","Unit Price","Total Value"});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        accountTable = new javax.swing.JTable();
        buyButton = new javax.swing.JButton();
        sellButton = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        marketTextArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveFileMenuItem = new javax.swing.JMenuItem();
        loadFileMenuItem = new javax.swing.JMenuItem();
        newFileMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        namesAscendingViewMenuItem = new javax.swing.JMenuItem();
        namesDescendingViewMenuItem = new javax.swing.JMenuItem();
        priceAscendingViewMenuItem = new javax.swing.JMenuItem();
        priceDescendingViewMenuItem = new javax.swing.JMenuItem();
        quantityAscendingViewMenuItem = new javax.swing.JMenuItem();
        quantityDescendingViewMenuItem = new javax.swing.JMenuItem();
        alertMenu = new javax.swing.JMenu();
        newAlertAlertMenuItem = new javax.swing.JMenuItem();
        editAlertsAlertMenuItem = new javax.swing.JMenuItem();
        toggleAlertCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        accountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {
                "Name", "Quantity", "Unit Price", "Total Value"
            }
        )
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    accountTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            accountTableMousePressed(evt);
        }
    });
    jScrollPane1.setViewportView(accountTable);

    buyButton.setText("Log Purchase");
    buyButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            buyButtonActionPerformed(evt);
        }
    });

    sellButton.setText("Log Sale");
    sellButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            sellButtonActionPerformed(evt);
        }
    });

    searchButton.setText("Search");
    searchButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchButtonActionPerformed(evt);
        }
    });

    descriptionTextArea.setEditable(false);
    descriptionTextArea.setColumns(20);
    descriptionTextArea.setLineWrap(true);
    descriptionTextArea.setRows(5);
    descriptionTextArea.setWrapStyleWord(true);
    jScrollPane2.setViewportView(descriptionTextArea);

    marketTextArea.setEditable(false);
    marketTextArea.setColumns(20);
    marketTextArea.setLineWrap(true);
    marketTextArea.setRows(5);
    marketTextArea.setWrapStyleWord(true);
    jScrollPane3.setViewportView(marketTextArea);

    fileMenu.setText("File");

    saveFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    saveFileMenuItem.setText("Save");
    saveFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveFileMenuItemActionPerformed(evt);
        }
    });
    fileMenu.add(saveFileMenuItem);

    loadFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
    loadFileMenuItem.setText("Open");
    loadFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            loadFileMenuItemActionPerformed(evt);
        }
    });
    fileMenu.add(loadFileMenuItem);

    newFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
    newFileMenuItem.setText("New");
    newFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            newFileMenuItemActionPerformed(evt);
        }
    });
    fileMenu.add(newFileMenuItem);

    menuBar.add(fileMenu);

    viewMenu.setText("View");

    namesAscendingViewMenuItem.setText("Names A-Z");
    viewMenu.add(namesAscendingViewMenuItem);

    namesDescendingViewMenuItem.setText("Names Z-A");
    viewMenu.add(namesDescendingViewMenuItem);

    priceAscendingViewMenuItem.setText("Price 1-10");
    viewMenu.add(priceAscendingViewMenuItem);

    priceDescendingViewMenuItem.setText("Price 10-1");
    viewMenu.add(priceDescendingViewMenuItem);

    quantityAscendingViewMenuItem.setText("Quantity 1-10");
    viewMenu.add(quantityAscendingViewMenuItem);

    quantityDescendingViewMenuItem.setText("Quantity 10-1");
    viewMenu.add(quantityDescendingViewMenuItem);

    menuBar.add(viewMenu);

    alertMenu.setText("Alerts");

    newAlertAlertMenuItem.setText("New Alert");
    alertMenu.add(newAlertAlertMenuItem);

    editAlertsAlertMenuItem.setText("Edit Alerts");
    alertMenu.add(editAlertsAlertMenuItem);

    toggleAlertCheckBoxMenuItem.setSelected(true);
    toggleAlertCheckBoxMenuItem.setText("Enabled");
    alertMenu.add(toggleAlertCheckBoxMenuItem);

    menuBar.add(alertMenu);

    setJMenuBar(menuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(sellButton, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addComponent(buyButton, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addComponent(searchTextField)
                .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addComponent(jScrollPane2))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(20, 20, 20)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sellButton))))
            .addContainerGap(67, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        new BuyFrame(this).setVisible(true);
        this.setEnabled(false);
    }//GEN-LAST:event_buyButtonActionPerformed

    private void sellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellButtonActionPerformed
        new SellFrame(this).setVisible(true);
        this.setEnabled(false);
    }//GEN-LAST:event_sellButtonActionPerformed

    private void saveFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileMenuItemActionPerformed
        Functions.save(accountList,alertList);
        listsModified = false;
    }//GEN-LAST:event_saveFileMenuItemActionPerformed

    private void loadFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileMenuItemActionPerformed
        Object[] data = Functions.load();
        accountList = (ItemList)data[0];
        alertList = (ArrayList)data[1];
        listsModified = false;
        refreshTable();
    }//GEN-LAST:event_loadFileMenuItemActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        refreshTable();
    }//GEN-LAST:event_searchButtonActionPerformed
    
    //Detailed info for clicked item.
    private void accountTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountTableMousePressed
        int ID = Functions.itemID((String)accountTable.getValueAt(accountTable.getSelectedRow(),0));
        descriptionTextArea.setText(Functions.itemDescription(ID));
        descriptionTextArea.setCaretPosition(0);//Scroll to top.
        marketTextArea.setText(Functions.marketInfo(accountList.getItem(ID)));
    }//GEN-LAST:event_accountTableMousePressed

    private void newFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileMenuItemActionPerformed
        boolean wipe=false;
        if(listsModified) {
            //ASK TO CONFIRM EXIT WITHOUT SAVE
            //Yes=0,No=1,Cancel=2 or -1.
            int choice = JOptionPane.showConfirmDialog(null,"Changes have not been saved,\nwould you like to save your changes?");
            switch(choice) {
                case 0: Functions.save(accountList, alertList);wipe=true;break;
                case 1: wipe=true;break;
                case 2: break;
                case -1: break;
                default: System.out.println("What the heck did you do?!?");
            }
        } else {
            wipe=true;
        }
        if(wipe) {
            accountList = new ItemList();
            alertList = new ArrayList();
            listsModified = false;
        }
        refreshTable();
    }//GEN-LAST:event_newFileMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accountTable;
    private javax.swing.JMenu alertMenu;
    private javax.swing.JButton buyButton;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JMenuItem editAlertsAlertMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem loadFileMenuItem;
    private javax.swing.JTextArea marketTextArea;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem namesAscendingViewMenuItem;
    private javax.swing.JMenuItem namesDescendingViewMenuItem;
    private javax.swing.JMenuItem newAlertAlertMenuItem;
    private javax.swing.JMenuItem newFileMenuItem;
    private javax.swing.JMenuItem priceAscendingViewMenuItem;
    private javax.swing.JMenuItem priceDescendingViewMenuItem;
    private javax.swing.JMenuItem quantityAscendingViewMenuItem;
    private javax.swing.JMenuItem quantityDescendingViewMenuItem;
    private javax.swing.JMenuItem saveFileMenuItem;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton sellButton;
    private javax.swing.JCheckBoxMenuItem toggleAlertCheckBoxMenuItem;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
}
